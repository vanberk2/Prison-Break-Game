import java.io.*;
import java.util.*;
import java.awt.*;  

public class Game {
  public static Scanner scan;
  public static String playerInput = "";
  public static Player player = null;
  
  public static void main(String[] args) {
    init();
    scan = new Scanner(System.in);
    
  }
  
  public static void init() {
    boolean loop = true;
    scan = new Scanner(System.in);
    
    do {
      System.out.println("Choose name for your character ");
      playerInput = scan.nextLine();
      loop = false;
    } while(loop);
    
    player = new Player(playerInput);
    System.out.println("Welcome " + player.getName() + " ! Escape Prison and become free!");
    System.out.println("Type help to show commands");
    
    loadBlocks();
    
    while(!playerInput.equals("quit")) {
      System.out.print("> ");
      playerInput = scan.nextLine();
      command(player);
      
      if (player.isKilled()) {
        System.out.println("YOU GOT CAUGHT! GAME OVER!");
        
        return;
        
      }
    }
    
  }
  
  public static void command(Player player) {
    Block lastBlock = Grid.currentBlock;
    int currentBlockX = Grid.currentBlock.getBlockCoord().getX();
    int currentBlockY = Grid.currentBlock.getBlockCoord().getY();
    
    switch(playerInput) {
      case "help":
        showHelp();
        break;
      case "north":
        Grid.moveDirection(currentBlockX-1, currentBlockY);
        showBlock(Grid.currentBlock, lastBlock, "north");
        break;
      case "south":
        Grid.moveDirection(currentBlockX+1, currentBlockY);
        showBlock(Grid.currentBlock, lastBlock, "south");
        break;
      case "east":
        Grid.moveDirection(currentBlockX, currentBlockY+1);
        showBlock(Grid.currentBlock, lastBlock, "east");
        break;
      case "west":
        Grid.moveDirection(currentBlockX, currentBlockY-1);
        showBlock(Grid.currentBlock, lastBlock, "west");
        break;
      case "room":
        showRoom(Grid.currentBlock);
        break;
      case "quit":
        System.out.println("GoodBye!");
        break;
      default: 
        System.out.println("Command not recognized. Type help.");
        break;
    }
  }
 
//  public void keyPressed(KeyEvent e) {
//    int keyCode = e.getKeyCode();
//    switch( keyCode ) { 
//      case KeyEvent.VK_UP:
//        Grid.moveDirection(currentBlockX-1, currentBlockY);
//        showBlock(Grid.currentBlock, lastBlock, "north");
//        break;
//      case KeyEvent.VK_DOWN:
//        Grid.moveDirection(currentBlockX+1, currentBlockY);
//        showBlock(Grid.currentBlock, lastBlock, "south");
//        break;
//      case KeyEvent.VK_LEFT:
//        Grid.moveDirection(currentBlockX, currentBlockY-1);
//        showBlock(Grid.currentBlock, lastBlock, "west");
//        break;
//      case KeyEvent.VK_RIGHT :
//        Grid.moveDirection(currentBlockX, currentBlockY+1);
//        showBlock(Grid.currentBlock, lastBlock, "east");
//        break;
//    }
//  } 
  
  public static void showHelp() {
    System.out.println("help - List of commands");
    System.out.println("east, west, north, south - movement");
    System.out.println("room - Shows current and neighboring rooms");
    System.out.println("quit - Quit game");
  }
  
  public static void showBlock(Block currentBlock, Block lastBlock, String direction) {
    if(currentBlock != lastBlock) {
      System.out.println("You move to " + currentBlock.getName() + "  in the " + direction);
      System.out.println(currentBlock.getDescription());
    }
    else {
      Grid.currentBlock = lastBlock;
      System.out.println("No path " + direction + " from this room");
    }
  }
  
  public static void showRoom(Block currentBlock) {
    int currentBlockX = Grid.currentBlock.getBlockCoord().getX();
    int currentBlockY = Grid.currentBlock.getBlockCoord().getY();
     
    //north
    if(Grid.checkDirection(currentBlockX-1, currentBlockY)) {
      System.out.println("In north "+Grid.initmap[currentBlockX-1][currentBlockY].getName());
    }
    
    //south
    if(Grid.checkDirection(currentBlockX+1, currentBlockY)) {
      System.out.println("In south " + Grid.initmap[currentBlockX+1][currentBlockY].getName());
    }
    
    //east
    if(Grid.checkDirection(currentBlockX, currentBlockY+1)) {    
      System.out.println("In east "+Grid.initmap[currentBlockX][currentBlockY+1].getName());
    }
    
    //west
    if(Grid.checkDirection(currentBlockX, currentBlockY-1)) {      
      System.out.println("In west "+Grid.initmap[currentBlockX][currentBlockY-1].getName());
    }
  }

  public static void loadBlocks() {
    Block[][] prison = new Block[3][3];
    
    prison[0][0] = new Block("Room1", "Start room", new Place(0,0));
    prison[0][1] = new Block("Room2", "empty room", new Place(0,1));
    prison[1][0] = new Block("Room3", "empty room", new Place(1,0));
    prison[1][1] = new Block("Room4", "empty room", new Place(1,1));
    prison[1][2] = new Block("Room5", "empty room", new Place(1,2));
    prison[0][2] = new Block("Room6", "empty room", new Place(0,2));
    
    Grid.initmap = prison;
    Grid.currentBlock = prison[0][0];
  }
  
}